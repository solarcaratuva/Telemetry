/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Sun May  5 03:29:08 2024.
 */

#ifndef BPS_H
#define BPS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define BPS_BPS_PACK_INFORMATION_FRAME_ID (0x406u)
#define BPS_BPS_CELL_VOLTAGE_FRAME_ID (0x416u)
#define BPS_BPS_CELL_TEMPERATURE_FRAME_ID (0x426u)
#define BPS_BPS_ERROR_FRAME_ID (0x106u)

/* Frame lengths in bytes. */
#define BPS_BPS_PACK_INFORMATION_LENGTH (6u)
#define BPS_BPS_CELL_VOLTAGE_LENGTH (6u)
#define BPS_BPS_CELL_TEMPERATURE_LENGTH (4u)
#define BPS_BPS_ERROR_LENGTH (3u)

/* Extended or standard frame types. */
#define BPS_BPS_PACK_INFORMATION_IS_EXTENDED (0)
#define BPS_BPS_CELL_VOLTAGE_IS_EXTENDED (0)
#define BPS_BPS_CELL_TEMPERATURE_IS_EXTENDED (0)
#define BPS_BPS_ERROR_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define BPS_BPS_PACK_INFORMATION_NAME "BPSPackInformation"
#define BPS_BPS_CELL_VOLTAGE_NAME "BPSCellVoltage"
#define BPS_BPS_CELL_TEMPERATURE_NAME "BPSCellTemperature"
#define BPS_BPS_ERROR_NAME "BPSError"

/* Signal Names. */
#define BPS_BPS_PACK_INFORMATION_PACK_VOLTAGE_NAME "pack_voltage"
#define BPS_BPS_PACK_INFORMATION_PACK_CURRENT_NAME "pack_current"
#define BPS_BPS_PACK_INFORMATION_PACK_SOC_NAME "pack_soc"
#define BPS_BPS_PACK_INFORMATION_DISCHARGE_RELAY_STATUS_NAME "discharge_relay_status"
#define BPS_BPS_PACK_INFORMATION_CHARGE_RELAY_STATUS_NAME "charge_relay_status"
#define BPS_BPS_PACK_INFORMATION_CHARGER_SAFETY_STATUS_NAME "charger_safety_status"
#define BPS_BPS_PACK_INFORMATION_DTC_STATUS_NAME "dtc_status"
#define BPS_BPS_PACK_INFORMATION_MULTIPURPOSE_INPUT_SIGNAL_STATUS_NAME "multipurpose_input_signal_status"
#define BPS_BPS_PACK_INFORMATION_ALWAYS_ON_SIGNAL_STATUS_NAME "always_on_signal_status"
#define BPS_BPS_PACK_INFORMATION_IS_READY_SIGNAL_STATUS_NAME "is_ready_signal_status"
#define BPS_BPS_PACK_INFORMATION_IS_CHARGING_SIGNAL_STATUS_NAME "is_charging_signal_status"
#define BPS_BPS_CELL_VOLTAGE_LOW_CELL_VOLTAGE_NAME "low_cell_voltage"
#define BPS_BPS_CELL_VOLTAGE_LOW_CELL_VOLTAGE_ID_NAME "low_cell_voltage_id"
#define BPS_BPS_CELL_VOLTAGE_HIGH_CELL_VOLTAGE_NAME "high_cell_voltage"
#define BPS_BPS_CELL_VOLTAGE_HIGH_CELL_VOLTAGE_ID_NAME "high_cell_voltage_id"
#define BPS_BPS_CELL_TEMPERATURE_LOW_TEMPERATURE_NAME "low_temperature"
#define BPS_BPS_CELL_TEMPERATURE_LOW_THERMISTOR_ID_NAME "low_thermistor_id"
#define BPS_BPS_CELL_TEMPERATURE_HIGH_TEMPERATURE_NAME "high_temperature"
#define BPS_BPS_CELL_TEMPERATURE_HIGH_THERMISTOR_ID_NAME "high_thermistor_id"
#define BPS_BPS_ERROR_INTERNAL_COMMUNICATIONS_FAULT_NAME "internal_communications_fault"
#define BPS_BPS_ERROR_INTERNAL_CONVERSION_FAULT_NAME "internal_conversion_fault"
#define BPS_BPS_ERROR_WEAK_CELL_FAULT_NAME "weak_cell_fault"
#define BPS_BPS_ERROR_LOW_CELL_VOLTAGE_FAULT_NAME "low_cell_voltage_fault"
#define BPS_BPS_ERROR_OPEN_WIRING_FAULT_NAME "open_wiring_fault"
#define BPS_BPS_ERROR_CURRENT_SENSOR_FAULT_NAME "current_sensor_fault"
#define BPS_BPS_ERROR_PACK_VOLTAGE_SENSOR_FAULT_NAME "pack_voltage_sensor_fault"
#define BPS_BPS_ERROR_WEAK_PACK_FAULT_NAME "weak_pack_fault"
#define BPS_BPS_ERROR_VOLTAGE_REDUNDANCY_FAULT_NAME "voltage_redundancy_fault"
#define BPS_BPS_ERROR_FAN_MONITOR_FAULT_NAME "fan_monitor_fault"
#define BPS_BPS_ERROR_THERMISTOR_FAULT_NAME "thermistor_fault"
#define BPS_BPS_ERROR_CANBUS_COMMUNICATIONS_FAULT_NAME "CANBUS_communications_fault"
#define BPS_BPS_ERROR_ALWAYS_ON_SUPPLY_FAULT_NAME "always_on_supply_fault"
#define BPS_BPS_ERROR_HIGH_VOLTAGE_ISOLATION_FAULT_NAME "high_voltage_isolation_fault"
#define BPS_BPS_ERROR_POWER_SUPPLY_12V_FAULT_NAME "power_supply_12v_fault"
#define BPS_BPS_ERROR_CHARGE_LIMIT_ENFORCEMENT_FAULT_NAME "charge_limit_enforcement_fault"
#define BPS_BPS_ERROR_DISCHARGE_LIMIT_ENFORCEMENT_FAULT_NAME "discharge_limit_enforcement_fault"
#define BPS_BPS_ERROR_CHARGER_SAFETY_RELAY_FAULT_NAME "charger_safety_relay_fault"
#define BPS_BPS_ERROR_INTERNAL_MEMORY_FAULT_NAME "internal_memory_fault"
#define BPS_BPS_ERROR_INTERNAL_THERMISTOR_FAULT_NAME "internal_thermistor_fault"
#define BPS_BPS_ERROR_INTERNAL_LOGIC_FAULT_NAME "internal_logic_fault"

/**
 * Signals in message BPSPackInformation.
 *
 * All signal values are as on the CAN bus.
 */
struct bps_bps_pack_information_t {
    /**
     * Pack Summed Voltage
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pack_voltage;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t pack_current;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t pack_soc;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t discharge_relay_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_relay_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charger_safety_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dtc_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t multipurpose_input_signal_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t always_on_signal_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t is_ready_signal_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t is_charging_signal_status;
};

/**
 * Signals in message BPSCellVoltage.
 *
 * All signal values are as on the CAN bus.
 */
struct bps_bps_cell_voltage_t {
    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t low_cell_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_cell_voltage_id;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t high_cell_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t high_cell_voltage_id;
};

/**
 * Signals in message BPSCellTemperature.
 *
 * All signal values are as on the CAN bus.
 */
struct bps_bps_cell_temperature_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_thermistor_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t high_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t high_thermistor_id;
};

/**
 * Signals in message BPSError.
 *
 * All signal values are as on the CAN bus.
 */
struct bps_bps_error_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t internal_communications_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t internal_conversion_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t weak_cell_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_cell_voltage_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t open_wiring_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t current_sensor_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pack_voltage_sensor_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t weak_pack_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t voltage_redundancy_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fan_monitor_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t thermistor_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t canbus_communications_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t always_on_supply_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t high_voltage_isolation_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_supply_12v_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_limit_enforcement_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t discharge_limit_enforcement_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charger_safety_relay_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t internal_memory_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t internal_thermistor_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t internal_logic_fault;
};

/**
 * Pack message BPSPackInformation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bps_bps_pack_information_pack(
    uint8_t *dst_p,
    const struct bps_bps_pack_information_t *src_p,
    size_t size);

/**
 * Unpack message BPSPackInformation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bps_bps_pack_information_unpack(
    struct bps_bps_pack_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BPSPackInformation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bps_bps_pack_information_init(struct bps_bps_pack_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bps_bps_pack_information_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_pack_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_pack_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bps_bps_pack_information_pack_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_pack_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_pack_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_pack_information_pack_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_pack_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_pack_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_pack_information_discharge_relay_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_discharge_relay_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_discharge_relay_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_pack_information_charge_relay_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_charge_relay_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_charge_relay_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_pack_information_charger_safety_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_charger_safety_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_charger_safety_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_pack_information_dtc_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_dtc_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_dtc_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_pack_information_multipurpose_input_signal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_multipurpose_input_signal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_multipurpose_input_signal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_pack_information_always_on_signal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_always_on_signal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_always_on_signal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_pack_information_is_ready_signal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_is_ready_signal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_is_ready_signal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_pack_information_is_charging_signal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_pack_information_is_charging_signal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_pack_information_is_charging_signal_status_is_in_range(uint8_t value);

/**
 * Pack message BPSCellVoltage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bps_bps_cell_voltage_pack(
    uint8_t *dst_p,
    const struct bps_bps_cell_voltage_t *src_p,
    size_t size);

/**
 * Unpack message BPSCellVoltage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bps_bps_cell_voltage_unpack(
    struct bps_bps_cell_voltage_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BPSCellVoltage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bps_bps_cell_voltage_init(struct bps_bps_cell_voltage_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bps_bps_cell_voltage_low_cell_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_cell_voltage_low_cell_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_cell_voltage_low_cell_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_cell_voltage_low_cell_voltage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_cell_voltage_low_cell_voltage_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_cell_voltage_low_cell_voltage_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bps_bps_cell_voltage_high_cell_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_cell_voltage_high_cell_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_cell_voltage_high_cell_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_cell_voltage_high_cell_voltage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_cell_voltage_high_cell_voltage_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_cell_voltage_high_cell_voltage_id_is_in_range(uint8_t value);

/**
 * Pack message BPSCellTemperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bps_bps_cell_temperature_pack(
    uint8_t *dst_p,
    const struct bps_bps_cell_temperature_t *src_p,
    size_t size);

/**
 * Unpack message BPSCellTemperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bps_bps_cell_temperature_unpack(
    struct bps_bps_cell_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BPSCellTemperature.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bps_bps_cell_temperature_init(struct bps_bps_cell_temperature_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_cell_temperature_low_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_cell_temperature_low_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_cell_temperature_low_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_cell_temperature_low_thermistor_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_cell_temperature_low_thermistor_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_cell_temperature_low_thermistor_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_cell_temperature_high_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_cell_temperature_high_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_cell_temperature_high_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_cell_temperature_high_thermistor_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_cell_temperature_high_thermistor_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_cell_temperature_high_thermistor_id_is_in_range(uint8_t value);

/**
 * Pack message BPSError.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bps_bps_error_pack(
    uint8_t *dst_p,
    const struct bps_bps_error_t *src_p,
    size_t size);

/**
 * Unpack message BPSError.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bps_bps_error_unpack(
    struct bps_bps_error_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BPSError.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bps_bps_error_init(struct bps_bps_error_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_internal_communications_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_internal_communications_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_internal_communications_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_internal_conversion_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_internal_conversion_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_internal_conversion_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_weak_cell_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_weak_cell_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_weak_cell_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_low_cell_voltage_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_low_cell_voltage_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_low_cell_voltage_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_open_wiring_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_open_wiring_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_open_wiring_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_current_sensor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_current_sensor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_current_sensor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_pack_voltage_sensor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_pack_voltage_sensor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_pack_voltage_sensor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_weak_pack_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_weak_pack_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_weak_pack_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_voltage_redundancy_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_voltage_redundancy_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_voltage_redundancy_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_fan_monitor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_fan_monitor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_fan_monitor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_thermistor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_thermistor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_thermistor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_canbus_communications_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_canbus_communications_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_canbus_communications_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_always_on_supply_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_always_on_supply_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_always_on_supply_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_high_voltage_isolation_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_high_voltage_isolation_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_high_voltage_isolation_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_power_supply_12v_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_power_supply_12v_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_power_supply_12v_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_charge_limit_enforcement_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_charge_limit_enforcement_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_charge_limit_enforcement_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_discharge_limit_enforcement_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_discharge_limit_enforcement_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_discharge_limit_enforcement_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_charger_safety_relay_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_charger_safety_relay_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_charger_safety_relay_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_internal_memory_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_internal_memory_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_internal_memory_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_internal_thermistor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_internal_thermistor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_internal_thermistor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bps_bps_error_internal_logic_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bps_bps_error_internal_logic_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bps_bps_error_internal_logic_fault_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
