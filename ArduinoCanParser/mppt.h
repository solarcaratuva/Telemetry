/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Sun May  5 03:28:49 2024.
 */

#ifndef MPPT_H
#define MPPT_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MPPT_MG0_STATUS_FRAME_ID (0x180u)
#define MPPT_MG1_STATUS_FRAME_ID (0x181u)
#define MPPT_MG0_OUTPUT_VOLTAGE_INPUT_POWER_FRAME_ID (0x280u)
#define MPPT_MG1_OUTPUT_VOLTAGE_INPUT_POWER_FRAME_ID (0x281u)
#define MPPT_MG0_PCBMOSFET_TEMPERATURE_FRAME_ID (0x480u)
#define MPPT_MG1_PCBMOSFET_TEMPERATURE_FRAME_ID (0x481u)

/* Frame lengths in bytes. */
#define MPPT_MG0_STATUS_LENGTH (8u)
#define MPPT_MG1_STATUS_LENGTH (8u)
#define MPPT_MG0_OUTPUT_VOLTAGE_INPUT_POWER_LENGTH (8u)
#define MPPT_MG1_OUTPUT_VOLTAGE_INPUT_POWER_LENGTH (8u)
#define MPPT_MG0_PCBMOSFET_TEMPERATURE_LENGTH (4u)
#define MPPT_MG1_PCBMOSFET_TEMPERATURE_LENGTH (4u)

/* Extended or standard frame types. */
#define MPPT_MG0_STATUS_IS_EXTENDED (0)
#define MPPT_MG1_STATUS_IS_EXTENDED (0)
#define MPPT_MG0_OUTPUT_VOLTAGE_INPUT_POWER_IS_EXTENDED (0)
#define MPPT_MG1_OUTPUT_VOLTAGE_INPUT_POWER_IS_EXTENDED (0)
#define MPPT_MG0_PCBMOSFET_TEMPERATURE_IS_EXTENDED (0)
#define MPPT_MG1_PCBMOSFET_TEMPERATURE_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define MPPT_MG0_STATUS_NAME "MG0Status"
#define MPPT_MG1_STATUS_NAME "MG1Status"
#define MPPT_MG0_OUTPUT_VOLTAGE_INPUT_POWER_NAME "MG0OutputVoltageInputPower"
#define MPPT_MG1_OUTPUT_VOLTAGE_INPUT_POWER_NAME "MG1OutputVoltageInputPower"
#define MPPT_MG0_PCBMOSFET_TEMPERATURE_NAME "MG0PCBMOSFETTemperature"
#define MPPT_MG1_PCBMOSFET_TEMPERATURE_NAME "MG1PCBMOSFETTemperature"

/* Signal Names. */
#define MPPT_MG0_STATUS_MG0_INPUT_CURRENT_NAME "MG0InputCurrent"
#define MPPT_MG0_STATUS_MG0_INPUT_VOLTAGE_NAME "MG0InputVoltage"
#define MPPT_MG1_STATUS_MG1_INPUT_CURRENT_NAME "MG1InputCurrent"
#define MPPT_MG1_STATUS_MG1_INPUT_VOLTAGE_NAME "MG1InputVoltage"
#define MPPT_MG0_OUTPUT_VOLTAGE_INPUT_POWER_MG0_OUTPUT_VOLTAGE_NAME "MG0OutputVoltage"
#define MPPT_MG0_OUTPUT_VOLTAGE_INPUT_POWER_MG0_INPUT_POWER_NAME "MG0InputPower"
#define MPPT_MG1_OUTPUT_VOLTAGE_INPUT_POWER_MG1_OUTPUT_VOLTAGE_NAME "MG1OutputVoltage"
#define MPPT_MG1_OUTPUT_VOLTAGE_INPUT_POWER_MG1_INPUT_POWER_NAME "MG1InputPower"
#define MPPT_MG0_PCBMOSFET_TEMPERATURE_MG0_PCB_TEMPERATURE_NAME "MG0PCBTemperature"
#define MPPT_MG0_PCBMOSFET_TEMPERATURE_MG0_MOSFET_TEMPERATURE_NAME "MG0MOSFETTemperature"
#define MPPT_MG1_PCBMOSFET_TEMPERATURE_MG1_PCB_TEMPERATURE_NAME "MG1PCBTemperature"
#define MPPT_MG1_PCBMOSFET_TEMPERATURE_MG1_MOSFET_TEMPERATURE_NAME "MG1MOSFETTemperature"

/**
 * Signals in message MG0Status.
 *
 * Current and voltage of the MG0 input
 *
 * All signal values are as on the CAN bus.
 */
struct mppt_mg0_status_t {
    /**
     * Current produced by the array connected to MG 0
     *
     * Range: 0.0..10000.0 (0..10000 mA)
     * Scale: 1
     * Offset: 0
     */
    float mg0_input_current;

    /**
     * Voltage of the array connected to MG0
     *
     * Range: 0.0..120.0 (0..120 V)
     * Scale: 1
     * Offset: 0
     */
    float mg0_input_voltage;
};

/**
 * Signals in message MG1Status.
 *
 * Current and voltage of the MG1 input
 *
 * All signal values are as on the CAN bus.
 */
struct mppt_mg1_status_t {
    /**
     * Current produced by the array connected to MG 1
     *
     * Range: 0.0..10000.0 (0..10000 mA)
     * Scale: 1
     * Offset: 0
     */
    float mg1_input_current;

    /**
     * Voltage of the array connected to MG1
     *
     * Range: 0.0..120.0 (0..120 V)
     * Scale: 1
     * Offset: 0
     */
    float mg1_input_voltage;
};

/**
 * Signals in message MG0OutputVoltageInputPower.
 *
 * MG0 output voltage and input power
 *
 * All signal values are as on the CAN bus.
 */
struct mppt_mg0_output_voltage_input_power_t {
    /**
     * Output voltage of MG 0
     *
     * Range: 0.0..200.0 (0..200 V)
     * Scale: 1
     * Offset: 0
     */
    float mg0_output_voltage;

    /**
     * Power produced by the array connected to MG 0
     *
     * Range: 0.0..1200000.0 (0..1200000 mW)
     * Scale: 1
     * Offset: 0
     */
    float mg0_input_power;
};

/**
 * Signals in message MG1OutputVoltageInputPower.
 *
 * MG1 output voltage and input power
 *
 * All signal values are as on the CAN bus.
 */
struct mppt_mg1_output_voltage_input_power_t {
    /**
     * Output voltage of MG 1
     *
     * Range: 0.0..200.0 (0..200 V)
     * Scale: 1
     * Offset: 0
     */
    float mg1_output_voltage;

    /**
     * Power produced by the array connected to MG 1
     *
     * Range: 0.0..1200000.0 (0..1200000 mW)
     * Scale: 1
     * Offset: 0
     */
    float mg1_input_power;
};

/**
 * Signals in message MG0PCBMOSFETTemperature.
 *
 * MG0 PCB and MOSFET temperature
 *
 * All signal values are as on the CAN bus.
 */
struct mppt_mg0_pcbmosfet_temperature_t {
    /**
     * Temperature of MG 0's PCB
     *
     * Range: -4000..8000 (-40..80 째C)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t mg0_pcb_temperature;

    /**
     * Temperature of MG 0's power MOSFETs
     *
     * Range: -4000..8000 (-40..80 째C)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t mg0_mosfet_temperature;
};

/**
 * Signals in message MG1PCBMOSFETTemperature.
 *
 * MG1 PCB and MOSFET temperature
 *
 * All signal values are as on the CAN bus.
 */
struct mppt_mg1_pcbmosfet_temperature_t {
    /**
     * Temperature of MG 1's PCB
     *
     * Range: -4000..8000 (-40..80 째C)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t mg1_pcb_temperature;

    /**
     * Temperature of MG 1's power MOSFETs
     *
     * Range: -4000..8000 (-40..80 째C)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t mg1_mosfet_temperature;
};

/**
 * Pack message MG0Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mppt_mg0_status_pack(
    uint8_t *dst_p,
    const struct mppt_mg0_status_t *src_p,
    size_t size);

/**
 * Unpack message MG0Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mppt_mg0_status_unpack(
    struct mppt_mg0_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MG0Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mppt_mg0_status_init(struct mppt_mg0_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float mppt_mg0_status_mg0_input_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg0_status_mg0_input_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg0_status_mg0_input_current_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float mppt_mg0_status_mg0_input_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg0_status_mg0_input_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg0_status_mg0_input_voltage_is_in_range(float value);

/**
 * Pack message MG1Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mppt_mg1_status_pack(
    uint8_t *dst_p,
    const struct mppt_mg1_status_t *src_p,
    size_t size);

/**
 * Unpack message MG1Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mppt_mg1_status_unpack(
    struct mppt_mg1_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MG1Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mppt_mg1_status_init(struct mppt_mg1_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float mppt_mg1_status_mg1_input_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg1_status_mg1_input_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg1_status_mg1_input_current_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float mppt_mg1_status_mg1_input_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg1_status_mg1_input_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg1_status_mg1_input_voltage_is_in_range(float value);

/**
 * Pack message MG0OutputVoltageInputPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mppt_mg0_output_voltage_input_power_pack(
    uint8_t *dst_p,
    const struct mppt_mg0_output_voltage_input_power_t *src_p,
    size_t size);

/**
 * Unpack message MG0OutputVoltageInputPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mppt_mg0_output_voltage_input_power_unpack(
    struct mppt_mg0_output_voltage_input_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MG0OutputVoltageInputPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mppt_mg0_output_voltage_input_power_init(struct mppt_mg0_output_voltage_input_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float mppt_mg0_output_voltage_input_power_mg0_output_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg0_output_voltage_input_power_mg0_output_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg0_output_voltage_input_power_mg0_output_voltage_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float mppt_mg0_output_voltage_input_power_mg0_input_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg0_output_voltage_input_power_mg0_input_power_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg0_output_voltage_input_power_mg0_input_power_is_in_range(float value);

/**
 * Pack message MG1OutputVoltageInputPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mppt_mg1_output_voltage_input_power_pack(
    uint8_t *dst_p,
    const struct mppt_mg1_output_voltage_input_power_t *src_p,
    size_t size);

/**
 * Unpack message MG1OutputVoltageInputPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mppt_mg1_output_voltage_input_power_unpack(
    struct mppt_mg1_output_voltage_input_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MG1OutputVoltageInputPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mppt_mg1_output_voltage_input_power_init(struct mppt_mg1_output_voltage_input_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float mppt_mg1_output_voltage_input_power_mg1_output_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg1_output_voltage_input_power_mg1_output_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg1_output_voltage_input_power_mg1_output_voltage_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float mppt_mg1_output_voltage_input_power_mg1_input_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg1_output_voltage_input_power_mg1_input_power_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg1_output_voltage_input_power_mg1_input_power_is_in_range(float value);

/**
 * Pack message MG0PCBMOSFETTemperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mppt_mg0_pcbmosfet_temperature_pack(
    uint8_t *dst_p,
    const struct mppt_mg0_pcbmosfet_temperature_t *src_p,
    size_t size);

/**
 * Unpack message MG0PCBMOSFETTemperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mppt_mg0_pcbmosfet_temperature_unpack(
    struct mppt_mg0_pcbmosfet_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MG0PCBMOSFETTemperature.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mppt_mg0_pcbmosfet_temperature_init(struct mppt_mg0_pcbmosfet_temperature_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t mppt_mg0_pcbmosfet_temperature_mg0_pcb_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg0_pcbmosfet_temperature_mg0_pcb_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg0_pcbmosfet_temperature_mg0_pcb_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t mppt_mg0_pcbmosfet_temperature_mg0_mosfet_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg0_pcbmosfet_temperature_mg0_mosfet_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg0_pcbmosfet_temperature_mg0_mosfet_temperature_is_in_range(int16_t value);

/**
 * Pack message MG1PCBMOSFETTemperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mppt_mg1_pcbmosfet_temperature_pack(
    uint8_t *dst_p,
    const struct mppt_mg1_pcbmosfet_temperature_t *src_p,
    size_t size);

/**
 * Unpack message MG1PCBMOSFETTemperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mppt_mg1_pcbmosfet_temperature_unpack(
    struct mppt_mg1_pcbmosfet_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MG1PCBMOSFETTemperature.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mppt_mg1_pcbmosfet_temperature_init(struct mppt_mg1_pcbmosfet_temperature_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t mppt_mg1_pcbmosfet_temperature_mg1_pcb_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg1_pcbmosfet_temperature_mg1_pcb_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg1_pcbmosfet_temperature_mg1_pcb_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t mppt_mg1_pcbmosfet_temperature_mg1_mosfet_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mppt_mg1_pcbmosfet_temperature_mg1_mosfet_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mppt_mg1_pcbmosfet_temperature_mg1_mosfet_temperature_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
